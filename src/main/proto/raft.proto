syntax = "proto3";

option java_multiple_files = true;
option java_package = "ua.edu.ucu";
option java_outer_classname = "RaftProtocolService";

service RaftProtocol {
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
}

// idempotent on secondary
message AppendEntriesRequest {
  message LogEntry {
    int32 term = 1;
    string command = 2;
  }
  int32 term = 1;// leader’s term
  int32 leaderId = 2; // so follower can redirect clients
  int32 prevLogIndex = 3; //index of log entry immediately preceding new ones
  int32 prevLogTerm = 4; //term of prevLogIndex entry
  repeated LogEntry entries = 5;// log entries to store (empty for heartbeat;
  // may send more than one for efficiency)
  int32 leaderCommit = 6; // leader’s commitIndex
}

message AppendEntriesResponse {
  int32 term = 1; // currentTerm, for leader to update itself
  bool success = 2; // true if follower contained entry matching prevLogIndex and prevLogTerm
}

message RequestVoteRequest {
  int32 term = 1; // candidate’s term
  int32 candidateId = 2; // candidate requesting vote
  int32 lastLogIndex = 3;// index of candidate’s last log entry (§5.4)
  int32 lastLogTerm =4; // term of candidate’s last log entry (§5.4)
}

message RequestVoteResponse {
  int32 term = 1; // currentTerm, for candidate to update itself
  int32 voteGranted = 2; // true means candidate received vote
}